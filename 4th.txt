#include <stdio.h>

struct Process {
    int pid;
    int arrival_time;
    int burst_time;
    int priority;
    int start_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
    int response_time;
    int is_completed;
};

int main() {
    int n, completed = 0, current_time = 0, idle_time = 0;
    float total_tat = 0, total_wt = 0, total_rt = 0, cpu_utilization, throughput;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter arrival time, burst time and priority for process P%d: ", p[i].pid);
        scanf("%d %d %d", &p[i].arrival_time, &p[i].burst_time, &p[i].priority);
        p[i].is_completed = 0;
    }

    while (completed != n) {
        int idx = -1;
        int highest_priority = 1e9;

        // Find process with highest priority which has arrived and not completed
        for (int i = 0; i < n; i++) {
            if (p[i].arrival_time <= current_time && !p[i].is_completed) {
                if (p[i].priority < highest_priority) {
                    highest_priority = p[i].priority;
                    idx = i;
                }
                else if (p[i].priority == highest_priority) {
                    // If priority same, choose process with earlier arrival time
                    if (p[i].arrival_time < p[idx].arrival_time) {
                        idx = i;
                    }
                }
            }
        }

        if (idx != -1) {
            p[idx].start_time = current_time;
            p[idx].completion_time = p[idx].start_time + p[idx].burst_time;
            p[idx].turnaround_time = p[idx].completion_time - p[idx].arrival_time;
            p[idx].waiting_time = p[idx].turnaround_time - p[idx].burst_time;
            p[idx].response_time = p[idx].start_time - p[idx].arrival_time;

            total_tat += p[idx].turnaround_time;
            total_wt += p[idx].waiting_time;
            total_rt += p[idx].response_time;

            current_time = p[idx].completion_time;
            p[idx].is_completed = 1;
            completed++;
        } else {
            current_time++;
            idle_time++;
        }
    }

    int total_time = current_time - p[0].arrival_time;
    cpu_utilization = ((float)(total_time - idle_time) / total_time) * 100;
    throughput = (float)n / total_time;

    printf("\nPID\tAT\tBT\tPR\tST\tCT\tTAT\tWT\tRT\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n",
               p[i].pid,
               p[i].arrival_time,
               p[i].burst_time,
               p[i].priority,
               p[i].start_time,
               p[i].completion_time,
               p[i].turnaround_time,
               p[i].waiting_time,
               p[i].response_time);
    }

    printf("\nAverage Turnaround Time: %.2f", total_tat / n);
    printf("\nAverage Waiting Time   : %.2f", total_wt / n);
    printf("\nAverage Response Time  : %.2f", total_rt / n);
    printf("\nCPU Utilization        : %.2f%%", cpu_utilization);
    printf("\nThroughput             : %.2f process/unit time\n", throughput);

    return 0;
}
