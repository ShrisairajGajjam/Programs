#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/resource.h>
#include <signal.h>

int main() {
    pid_t pid, child_pid;
    int status;

    printf("Parent process PID: %d\n", getpid());

    pid = fork();

    if (pid == -1) {
        perror("Fork failed");
        exit(1);
    }
    else if (pid == 0) {
        // Child process
        printf("Child process created. PID: %d, Parent PID: %d\n", getpid(), getppid());

        // Set priority (nice value)
        int priority = getpriority(PRIO_PROCESS, 0);
        printf("Initial nice value: %d\n", priority);

        setpriority(PRIO_PROCESS, 0, 10);
        priority = getpriority(PRIO_PROCESS, 0);
        printf("Updated nice value: %d\n", priority);

        // Simulate some work
        sleep(5);
        printf("Child process completed.\n");
        exit(0);
    }
    else {
        // Parent process
        printf("Parent waiting for child (PID %d)...\n", pid);

        // Wait for child to complete
        waitpid(pid, &status, 0);

        if (WIFEXITED(status)) {
            printf("Child exited with status %d\n", WEXITSTATUS(status));
        } else {
            printf("Child did not exit normally.\n");
        }
    }

    return 0;
}
